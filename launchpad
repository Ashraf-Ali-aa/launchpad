#!/usr/bin/env bash

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m?\033[0m  Formation failed  \e[31m?\033[0m\n" >&2; exit $ret' EXIT

set -e

###############################################################################
# Check for required functions file
###############################################################################

if [ -e utils ]; then
	cd "$(dirname "${BASH_SOURCE[0]}")" \
		&& . "utils"
else
	printf "\n ??  ./utils not found  ???? First, you need to utils on your haters\n"
	exit 1
fi

###############################################################################
# CHECK: Bash version
###############################################################################

check_bash_version

###############################################################################
# Get in Formation!          http://patorjk.com/software/taag/ ( font: Script )
###############################################################################

printf "

MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
                                       .lKWMMMMMMMMMMMM
                                         .lKWMMMMMMMMMM
                                           .lKWMMMMMMMM
        ....................................'cONWMMMMMM
       ,0NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN0llKWMMMM
       ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK, .lKWMM
d,     ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK,   .lKW
MXx,   ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK;     .l
MMMXx, ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK,
MMMMMXxdO00000000000KNMMMMMMMMMMMWX00000000000k'
MMMMMMMNO:..........,OMMMMMMMMMMMX:...........
MMMMMMMMMXx,        .kMMMMMMMMMMMK,
MMMMMMMMMMMXx,      .kMMMMMMMMMMMK,
MMMMMMMMMMMMMXx,    .kMMMMMMMMMMMK,        ............
MMMMMMMMMMMMMMMXx,  .kMMMMMMMMMMMK,       :0KK000KKKKKK
MMMMMMMMMMMMMMMMMXx''OMMMMMMMMMMMK,       oWMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMXOkxddddddddddl.       oWMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMXx,                  oWMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMXd'                oWMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMXdc'             oWMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMWK:            oWMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
?????????????????????????????????????????????????????
?  Okay developers now let's get ready to ${bold}launch${normal}.   ?
?????????????????????????????????????????????????????
?  Safe to run multiple times on the same machine.  ?
?  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based   ?
?  on what is already installed on the machine.     ?
?????????????????????????????????????????????????????
   ${dim}$(get_os) $(get_os_version) ${normal} // ${dim}$BASH ${normal} // ${dim}$BASH_VERSION${reset}
"

###############################################################################
# CHECK: Internet
###############################################################################
chapter "Checking internet connection?"
check_internet_connection

###############################################################################
# PROMPT: Password
###############################################################################
chapter "Caching password?"
ask_for_sudo

###############################################################################
# PROMPT: SSH Key
###############################################################################
chapter 'Checking for SSH key?'
ssh_key_setup

###############################################################################
# INSTALL: Dependencies
###############################################################################
chapter "Installing Dependencies?"

# -----------------------------------------------------------------------------
# XCode
# -----------------------------------------------------------------------------
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
	test -d "${xpath}" && test -x "${xpath}" ; then
	print_success_muted "Xcode already installed. Skipping."
else
	step "Installing Xcode?"
	xcode-select --install
	print_success "Xcode installed!"
fi

if [ ! -d "$HOME/.bin/" ]; then
	mkdir "$HOME/.bin"
fi


# -----------------------------------------------------------------------------
# NVM
# -----------------------------------------------------------------------------
if ! [ -e $NVM_DIR ]; then
	step "Installing NVM?"
	# ensures that nvm
	touch ~/.bash_profile
	curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
	# This loads nvm for the terminal session
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
	print_success "NVM installed!"
	step "Installing latest Node?"
	nvm install 10
	nvm use 10
	nvm run node --version
	nodev=$(node -v)
	print_success "Using Node $nodev!"
else
	print_success_muted "NVM/Node already installed. Skipping."
fi
# -----------------------------------------------------------------------------
# Homebrew
# -----------------------------------------------------------------------------
if ! [ -x "$(command -v brew)" ]; then
	step "Installing Homebrew?"
	curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
	export PATH="/usr/local/bin:$PATH"
	print_success "Homebrew installed!"
else
	print_success_muted "Homebrew already installed. Skipping."
fi

if brew list | grep -Fq brew-cask; then
	step "Uninstalling old Homebrew-Cask?"
	brew uninstall --force brew-cask
	print_success "Homebrew-Cask uninstalled!"
fi

###############################################################################
# INSTALL: brews
###############################################################################
if [ -e $cwd/sources/brews ]; then
	chapter "Installing Homebrew formulae?"

	for brew in $(<$cwd/sources/brews); do
		install_brews $brew
	done
fi

###############################################################################
# UPDATE: Homebrew
###############################################################################
chapter "Updating Homebrew formulae?"
brew update

###############################################################################
# INSTALL: casks
###############################################################################
if [ -e $cwd/sources/casks ]; then
	chapter "Installing apps via Homebrew?"

	for cask in $(<$cwd/sources/casks); do
	    install_application_via_brew $cask
	done
fi

###############################################################################
# INSTALL: Mac App Store Apps
###############################################################################
chapter "Installing apps from App Store?"
if [ -x mas ]; then

	print_warning "Please install mas-cli first: brew mas. Skipping."

	else

	if [ -e $cwd/sources/apps ]; then
		if mas_setup; then
			# Workaround for associative array in Bash 3
			# https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option
			for app in $(<$cwd/sources/apps); do
				KEY="${app%%::*}"
				VALUE="${app##*::}"
				install_application_via_app_store $KEY $VALUE
			done
		else
			print_warning "Please signin to App Store first. Skipping."
		fi
	fi

fi

###############################################################################
# CLEAN: Homebrew files
###############################################################################
chapter "Cleaning up Homebrew files?"
brew cleanup 2> /dev/null

###############################################################################
# INSTALL: npm packages
###############################################################################
if [ -e $cwd/sources/npm ]; then
	chapter "Installing npm packages?"

	for pkg in $(<$cwd/sources/npm); do
		KEY="${pkg%%::*}"
		VALUE="${pkg##*::}"
		install_npm_packages $KEY $VALUE
	done
fi


###############################################################################
# ??????????????????????????????????????????????????????????????????????#
###############################################################################
we_have_lift_off
